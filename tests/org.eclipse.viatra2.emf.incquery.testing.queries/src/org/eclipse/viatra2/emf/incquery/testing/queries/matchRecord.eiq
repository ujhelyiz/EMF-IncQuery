/*******************************************************************************
 * Copyright (c) 2010-2012, Abel Hegedus, Istvan Rath and Daniel Varro
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Abel Hegedus - initial API and implementation
 *******************************************************************************/

package org.eclipse.viatra2.emf.incquery.testing.queries

import "http://www.eclipse.org/viatra2/emf/incquery/snapshot"
import "http://www.eclipse.org/emf/2002/Ecore"

/*private pattern MatchRecordWithSubstitution(
	Record : MatchRecord,
	ParameterName : EString,
	Substitution : MatchSubstitutionRecord
) = {
	MatchRecord.substitutions(Record,Substitution);
	MatchSubstitutionRecord.parameterName(Substitution, ParameterName);
}*/
	
/*private pattern CorrectRecordSubstitutionValue(
	Record : MatchRecord,
	ParameterName : EString,
	Value
) = {
	find MatchRecordWithSubstitution(Record, ParameterName, Substitution);
	MatchSubstitutionRecord.derivedValue(Substitution, Value);
}*/

private pattern IncorrectSubstitution(
	Record : MatchRecord,
	CorrespondingRecord : MatchRecord
) = {
	MatchRecord.substitutions(Record,Substitution);
	MatchSubstitutionRecord.parameterName(Substitution,Name);
	MatchRecord.substitutions(CorrespondingRecord,CorrespondingSubstitution);
	MatchSubstitutionRecord.parameterName(CorrespondingSubstitution,Name);
	MatchSubstitutionRecord.derivedValue(Substitution,Value1);
	MatchSubstitutionRecord.derivedValue(CorrespondingSubstitution,Value2);
	Value1 != Value2;
}

private pattern CorrespondingRecords(
	Record : MatchRecord,
	CorrespondingRecord : MatchRecord
) = {
	Record != CorrespondingRecord;
	neg find IncorrectSubstitution(Record, CorrespondingRecord);
}

private pattern CorrespondingRecordInMatchSetRecord(
	Record : MatchRecord,
	CorrespodingRecord : MatchRecord,
	ExpectedSet : MatchSetRecord
) = {
	Record != CorrespodingRecord;
	MatchSetRecord.matches(ExpectedSet,CorrespodingRecord);
	find CorrespondingRecords(Record, CorrespodingRecord);
}

@Off
pattern UnexpectedMatchRecord(
	ActualSet : MatchSetRecord,
	ExpectedSet : MatchSetRecord,
	Record : MatchRecord
) = {
	MatchSetRecord.matches(ActualSet, Record);
	MatchSetRecord.patternQualifiedName(ActualSet,PatternName);
	MatchSetRecord.patternQualifiedName(ExpectedSet,PatternName);	
	ActualSet != ExpectedSet;
	neg find CorrespondingRecordInMatchSetRecord(Record, _CorrespodingRecord, ExpectedSet);
}

/*pattern NotFoundMatchRecord(
	ActualSet : MatchSetRecord,
	ExpectedSet : MatchSetRecord,
	Record : MatchRecord
) = {
	MatchSetRecord.matches(ExpectedSet, Record);
	neg find CorrespondingRecordInMatchSetRecord(Record, CorrespodingRecord, ActualSet);
}*/

@Off
@DerivedFeature(feature = "role")
pattern RecordRoleValue(
	Record : MatchRecord,
	Role
) = {
	MatchSetRecord.filter(_MS,Record);
	RecordRole::Filter == Role;
} or {
	MatchSetRecord.matches(_MS,Record);
	RecordRole::Match == Role;
}

@Off
@DerivedFeature(feature = "derivedValue")
pattern SubstitutionValue(
	Substitution : MatchSubstitutionRecord,
	Value
) = {
	MiscellaneousSubstitution.value(Substitution,Value);
} or {
	EMFSubstitution.value(Substitution,Value);
} or {
	IntSubstitution.value(Substitution,Value);
} or {
	LongSubstitution.value(Substitution,Value);
} or {
	DoubleSubstitution.value(Substitution,Value);
} or {
	FloatSubstitution.value(Substitution,Value);
} or {
	BooleanSubstitution.value(Substitution,Value);
} or {
	StringSubstitution.value(Substitution,Value);
} or {
	DateSubstitution.value(Substitution,Value);
} or {
	EnumSubstitution.valueLiteral(Substitution,Value);
}
	//EStructuralFeature(ValueFeature);
	//EStructuralFeature.name(ValueFeature,"value");
	//EClass.eStructuralFeatures(SubstitutionClass,ValueFeature);
	//check(Substitution.eClass.equals(SubstitutionClass));
	//check(Substitution.eGet(ValueFeature).equals(Value));